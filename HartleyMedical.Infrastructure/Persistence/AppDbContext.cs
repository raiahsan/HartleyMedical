// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Application.ServiceInterfaces.IUserServices;
using HartleyMedical.Domain.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using Action = HartleyMedical.Domain.Entities.Action;
#nullable disable

namespace HartleyMedical.Infrastructure.Persistence
{
    public partial class AppDbContext : DbContext
    {
        private readonly ICurrentUserService _currentUserService;
        private readonly IConfiguration _configuration;
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options, ICurrentUserService currentUserService, IConfiguration configuration)
            : base(options)
        {
            _currentUserService = currentUserService;
            _configuration = configuration;
            this.ChangeTracker.LazyLoadingEnabled = false;
        }

        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<ActionToModule> ActionToModules { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityDirection> ActivityDirections { get; set; }
        public virtual DbSet<ActivityEmail> ActivityEmails { get; set; }
        public virtual DbSet<ActivityMessage> ActivityMessages { get; set; }
        public virtual DbSet<ActivityNote> ActivityNotes { get; set; }
        public virtual DbSet<ActivityPhoneCall> ActivityPhoneCalls { get; set; }
        public virtual DbSet<ActivityStatus> ActivityStatuses { get; set; }
        public virtual DbSet<ActivityTask> ActivityTasks { get; set; }
        public virtual DbSet<ActivityType> ActivityTypes { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<ApiLog> ApiLogs { get; set; }
        public virtual DbSet<ContactMethod> ContactMethods { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<Diagnosis> Diagnoses { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailType> EmailTypes { get; set; }
        public virtual DbSet<Entity> Entities { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<ICDCodeType> ICDCodeTypes { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatuses { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientAddress> PatientAddresses { get; set; }
        public virtual DbSet<PatientContact> PatientContacts { get; set; }
        public virtual DbSet<PatientDiagnosis> PatientDiagnoses { get; set; }
        public virtual DbSet<PatientPayor> PatientPayors { get; set; }
        public virtual DbSet<PatientPayorEligibility> PatientPayorEligibilities { get; set; }
        public virtual DbSet<PatientPayorEligibilityDetail> PatientPayorEligibilityDetails { get; set; }
        public virtual DbSet<PatientProvider> PatientProviders { get; set; }
        public virtual DbSet<Payor> Payors { get; set; }
        public virtual DbSet<PayorLevel> PayorLevels { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<ProviderLocation> ProviderLocations { get; set; }
        public virtual DbSet<ProviderType> ProviderTypes { get; set; }
        public virtual DbSet<RelationshipType> RelationshipTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SystemSetting> SystemSettings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserToOrganizationRole> UserToOrganizationRoles { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<DEAHistory> DEAHistories { get; set; }
        public virtual DbSet<UserMedicalInfo> UserMedicalInfos { get; set; }
        public virtual DbSet<MedicalDesignation> MedicalDesignations { get; set; }
        public virtual DbSet<MedicalLicenseState> MedicalLicenseStates { get; set; }
        public virtual DbSet<Speciality> Specialities { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public override int SaveChanges()
        {
            foreach (var entry in ChangeTracker.Entries<BaseModel>())
            {

                switch (entry.State)
                {
                    case EntityState.Added:
                        entry.Entity.CreatedBy = _currentUserService?.UserId ?? 0;
                        entry.Entity.CreatedDate = DateTime.UtcNow;
                        entry.Entity.ModifiedBy = _currentUserService?.UserId ?? 0;
                        entry.Entity.ModifiedDate = DateTime.UtcNow;
                        break;
                    case EntityState.Modified:
                        entry.Entity.ModifiedBy = _currentUserService?.UserId ?? 0;
                        entry.Entity.ModifiedDate = DateTime.UtcNow;
                        break;
                }
            }
            return base.SaveChanges();
        }

        public DataSet ExecuteSqlStoredProcedure(string sqlQueryToExecuteStoredProcedure, List<SqlParameter> parameters)
        {
            var dbConnection = Database.GetDbConnection();
            var dataset = new DataSet();
            var sqlDataAdapter = new SqlDataAdapter(sqlQueryToExecuteStoredProcedure, _configuration.GetConnectionString("DefaultConnection"));
            sqlDataAdapter.SelectCommand.Parameters.Clear();
            if (parameters?.Count > 0)
            {
                sqlDataAdapter.SelectCommand.Parameters.AddRange(parameters.ToArray());
            }
            sqlDataAdapter.SelectCommand.CommandTimeout = 100;
            sqlDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            sqlDataAdapter.Fill(dataset);
            return dataset;
        }
    }
}
